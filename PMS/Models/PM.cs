using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;


//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PMS.Models
{
    using System;
    using System.Collections.Generic;
    using System.Configuration;
    using System.Data.SqlClient;
    
    public partial class PM
    {
        public PM()
        {
            this.comments = new HashSet<comment>();
            this.feedbacks = new HashSet<feedback>();
            this.requests = new HashSet<request>();
        }
    
        public int id { get; set; }
        public int user_id { get; set; }
        public string qualfications { get; set; }
    
        public virtual ICollection<comment> comments { get; set; }
        public virtual ICollection<feedback> feedbacks { get; set; }
        public virtual user user { get; set; }
        public virtual ICollection<request> requests { get; set; }


        /*
        public void send_feedback(string projectId, String juniorId, String rate, String content, String TeamLeader_id)
        {
            String date = DateTime.Now.ToString("MM/dd/yyyy");
            String ProjectManager_id = "select (PM_id) from request when project_id = "+ projectId + "and request_state = 0";
            String queryString = "insert into feedback values((select (max(id)+1)  from feedback)," + rate + "," + content + "," + ProjectManager_id + "," + TeamLeader_id + "," + juniorId + "," + projectId + "," + date + ")";
            var connectionString = ConfigurationManager.ConnectionStrings["Database1Entities"].ConnectionString;
            using (var connection = new SqlConnection(connectionString))
            {
                var command = new SqlCommand(queryString, connection);
                connection.Open();
                using (var reader = command.ExecuteReader())
                connection.Close();
            }  
        }

        public void approve_disapprove_leaving(bool accept ,String user_id,String project_id)
        {
            
            string queryString = "";
            if (!accept)
            {
                queryString = "update team set user_remove = 0 where user_id =  " + user_id + " and project_id =" + project_id;
            }
            else
            {
                queryString = "delete from team where user_id =  " + user_id + " and project_id =" + project_id;
            }
            var connectionString = ConfigurationManager.ConnectionStrings["Database1Entities"].ConnectionString;
            using (var connection = new SqlConnection(connectionString))
            {
                var command = new SqlCommand(queryString, connection);
                connection.Open();
                using (var reader = command.ExecuteReader())
                    connection.Close();
            }
            
        }
        */
    }
}
